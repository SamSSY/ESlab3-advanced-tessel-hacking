var tessel = require('tessel');
var IC_control = require('./7441_IC_control');
var Keypad = require('./tessel-matrix-keypad');
var gpio_bank = tessel.port['GPIO'];
var leds = tessel.led;

// use led status array to indicate opration type 
// ie. [ true, false, false, false ] => add 
// with the first led glowing 
var led_status_and_op_type = [false, false, false, false]; 

function calculator (options) {
    
    this.ones = new IC_control(options[0]);
    this.tens = new IC_control(options[1]);
    this.hundredPins = options[2];
    this.keypadOptions = options[3];
    this.opIng_pin = options[4];
    this.opIng_pin.rawDirection(true);
    this.opIng_pin.rawWrite(true);
    this.keypad = new Keypad({
      keys: [
        ['1', '2', '3', '+'],
        ['4', '5', '6', '-'],
        ['7', '8', '9', '*'],
        ['C', '0', '#', '/']],
      rows: [this.keypadOptions[0], this.keypadOptions[1], this.keypadOptions[2], this.keypadOptions[3] ],
      cols: [this.keypadOptions[4], this.keypadOptions[5], this.keypadOptions[6], this.keypadOptions[7] ]
    });
    this.opValue = 0;
    this.clear();    
    
}

calculator.prototype ={
  
  Add : function(addValue){
    this.currentValue += addValue;
    this.showValue();
  },
  
  substract: function(substractValue){
    this.currentValue -= substractValue;
    this.showValue();

  },
  
  multiply: function(multiplyValue){
    this.currentValue *= multiplyValue;
    this.showValue();

  },
  
  divide: function(divideValue){
    this.currentValue /= divideValue;
    console.log("value: " + this.currentValue);
    this.showValue();  
  },
  
  clear: function(){
    
    for (var i = 0 ;i < 4; i++){
      led_status_and_op_type[i] = false;
      leds[i].output(0);
    }
    this.opValue = 0;
    this.currentValue = 0;
    this.showValue();  
  },
  printHundreds : function(value) {
    switch(value){
      case 0:
        this.hundredPins.write(0);
        break;
      case 1:
        this.hundredPins.write(0.07);
        break;
      case 2:
        this.hundredPins.write(0.13);
        break;
      case 3:
        this.hundredPins.write(0.18);
        break;
      case 'none':
        this.hundredPins.write(0.82);
        break;
      case 4:
        this.hundredPins.write(0.24);
        break;
      case 5:
        this.hundredPins.write(0.29);
        break;
      case 6:
        this.hundredPins.write(0.34);
        break;
      case 7:
        this.hundredPins.write(0.395);
        break;
      case 8:
        this.hundredPins.write(0.43);
        break;
      case 9:
        this.hundredPins.write(0.49);
        break;
      default:
        //this.hundredPins.write((value + 1) * 0.05);
        break;
    }
  },
  showValue: function(){
    
    if(this.currentValue < 10 && this.currentValue >= 0){
      this.ones.printWord(this.currentValue);
      this.tens.printWord('none');
      this.printHundreds('none');
    }
    else if(this.currentValue >= 10 && this.currentValue < 100){
      this.ones.printWord(this.currentValue % 10);
      this.tens.printWord(Math.floor(this.currentValue/10)); 
      //this.printHundreds('none');
    }
    else if(this.currentValue >= 100 && this.currentValue < 1000){
      var hundred = Math.floor(this.currentValue/100);
      var ten =  Math.floor((this.currentValue % 100)/10);
      var one =  this.currentValue % 10;
      this.ones.printWord(one);
      this.tens.printWord(ten);
      this.printHundreds(hundred);
    } 
    else{ 
      console.log('overflow: ' + this.currentValue);
      this.ones.printWord(0);
      this.tens.printWord(0);
      this.printHundreds(0);
    }
  },
  calculate : function(){
   
    this.keypad.on('keydown', function(key){
        //console.log('current value:' + this.currentValue);
        if ( !isNaN(key) )
          for (var i = 0 ;i < 4; i++){
            if (led_status_and_op_type[i]){    
              if (this.opValue < 100){ //digit limits
                this.printHundreds('none');
                this.opValue = this.opValue*10 + parseInt(key);
              }
              //console.log(this.opValue);
              
              if (this.opValue >= 100 && this.opValue < 1000 ) {
                this.tens.printWord(Math.floor((this.opValue % 100)/ 10));
                this.printHundreds(Math.floor(this.opValue/100));
                this.ones.printWord(this.opValue % 10);
              }
              else if ((this.opValue >= 10) && (this.opValue < 100)){
                this.tens.printWord(Math.floor(this.opValue/10));
                this.printHundreds('none');
              }
              else if( this.opValue < 10){
                this.printHundreds('none');
                this.tens.printWord('none');
              }       
              this.ones.printWord(this.opValue % 10);
              break;
            }
            else if (i == 3){
              if (this.currentValue < 100){ //digit limits
                this.currentValue = this.currentValue*10 + parseInt(key);
              }
              this.showValue();
            }
          }
        else{
          switch(key){
            case '+':
              leds[0].output(1);
              leds[1].output(0);
              leds[2].output(0);
              leds[3].output(0);
              led_status_and_op_type[0] = true;
              led_status_and_op_type[1] = false;
              led_status_and_op_type[2] = false;
              led_status_and_op_type[3] = false;
              this.opIng_pin.rawWrite(0);
              this.showValue();
              break;
            case '-':
              leds[0].output(0);
              leds[1].output(1);
              leds[2].output(0);
              leds[3].output(0);
              led_status_and_op_type[0] = false;
              led_status_and_op_type[1] = true;
              led_status_and_op_type[2] = false;
              led_status_and_op_type[3] = false;
              this.opIng_pin.rawWrite(0);
              this.showValue();
              break;
            case '*':
              leds[0].output(0);
              leds[1].output(0);
              //leds[2].output(1);
              leds[3].output(0);
              led_status_and_op_type[0] = false;
              led_status_and_op_type[1] = false;
              led_status_and_op_type[2] = true;
              led_status_and_op_type[3] = false;
              this.opIng_pin.rawWrite(0);
              this.showValue();
              break;
            case '/':
              leds[0].output(0);
              leds[1].output(0);
              leds[2].output(0);
              leds[3].output(1);
              led_status_and_op_type[0] = false;
              led_status_and_op_type[1] = false;
              led_status_and_op_type[2] = false;
              led_status_and_op_type[3] = true;
              this.opIng_pin.rawWrite(0);
              this.showValue();
              break;
            case 'C':
              this.clear();
              break;
            case '#':
              var opration;
              for (var i = 0 ;i < 4; i++){
                if (led_status_and_op_type[i]){
                  for (var j=0; j<4; j++){
                    led_status_and_op_type[j] = false;    
                    leds[j].output(0);
                  }
                  opration = i;
                  this.opIng_pin.rawWrite(1);
                  break;
                }
              }
              switch (opration){   
                case 0:
                  this.Add(this.opValue);
                  break;
                case 1:
                  this.substract(this.opValue);
                  break;
                case 2:
                  this.multiply(this.opValue);
                  break;
                case 3:
                  this.divide(this.opValue);
                  break;
                default:
                  break;
              }
              this.opValue = 0;
              break;
              
            default:
              console.log('operator default');
          }
        }    
      }.bind(this));
  }
}

module.exports = calculator;