var EventEmitter = require('events').EventEmitter;

function Keypad (options) {
  this.initialize(options.keys);
  this.rows = options.rows;
  this.cols = options.cols;
  this.start();
}


Keypad.prototype = {

  __proto__: EventEmitter.prototype,

  initialize: function( _key_arr ) {
    this.key_arr = _key_arr;
    this.keys = {};
    _key_arr.forEach(function(row){
      row.forEach(function(key){
        this.keys[key] = false;
      }, this)
    }, this)
  },

  start: function() {
    var _this = this;
    setInterval(function(){
      _this.getPressed();
    }, 1);
  },

  getPressed: function() {
    var pressed = [];
    pressed = this.scan();
    this.process(pressed);
    return pressed;
  },

  process: function( keys ) {

    Object.keys(this.keys).forEach(function(key){
      if(this.keys[key] && keys.indexOf(key) === -1) this.throw(key, false);
    }, this);

    keys.forEach(function(key){
      if(!this.keys[key]) this.throw(key, true);
    }, this);
  },

  scan: function() {
    var arr = [];

    this.rows.forEach(function(pin){
      pin.high();
    });

    this.cols.forEach(function(colpin, ci){
       colpin.output(0);
      
       this.rows.forEach(function(rowpin, ri){
         if(!rowpin.read()) arr.push(this.key_arr [ri][ci]);
       }, this);
      
       colpin.high();
    }, this);
    
    return arr;
  },
  
  throw: function(key, type) {
    this.keys[key] = type;
    this.emit('change', key, type);
    this.emit(type ? 'keydown' : 'keyup', key);
  },
}


module.exports = Keypad;
